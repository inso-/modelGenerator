#!/usr/bin/env python
from src.language.language import *
from src.utils.PromptUtils import *

def configure_generate_settings():
            code = ""
            for lang in language:
                todo = query_yes_no("Generate all models in %s" % lang.capitalize())
                if todo:
                    code += lang.upper() + " = 1\n"
                    code += lang.upper() + "_PROMPT = 0\n"
                else:
                    code += lang.upper() + " = 0\n"
                    todo = query_yes_no("For each models prompt confirm generate in %s" % lang.capitalize())
                    if todo:
                        code += lang.upper() + "_PROMPT = 1\n"
                    else:
                        code += lang.upper() + "_PROMPT = 0\n"
            settings = open("src/settings.py", "w")
            settings.write(code)


def getEngineByDB(database):
            typeTable = { "sqlite3" : "django.db.backends.sqlite3",
                          "mysql" : "django.db.backends.mysql",
                          "oracle" : "django.db.backends.oracle",
                          "postgresql" : "django.db.backends.postgresql",
                          "postgresql_psycopg2" : "django.db.backends.postgresql_psycopg2",
            }
            typeBackend = typeTable.get(database)
            if typeBackend is None:
                        print "database type not found: " + database
                        return "django.db.backends.sqlite3"
            return typeBackend

def find_sub(the_list, substring):
            i = 0
            for it in the_list:
                        if substring in it:
                                    return i
                        i = i + 1
            return -1

def configure_database_settings():
            res = query_multiple("Database Type", ["sqlite3", "mysql", "oracle", "postgresql", "postgresql_psycopg2", "json", "raml", "japi"], default=["mysql"])
            if (res == "sqlite3") or (res == "json") or (res == "raml") or  (res == "japi"):
                    import os
                    path = ""
                    if res == "sqlite3":
                        path = query("Sqlite3 file path", False, os.getcwd() + "/db.sqlite3")
                    elif res == "json":
                        path = query("JSON file path", False, os.getcwd() + "/data.json")
                    elif res == "raml":
                        path = query("RAML file path", False, os.getcwd() + "/schema.raml")
                    elif res == "japi":
                        path = query("JAPI file path", False, os.getcwd() + "/nflarrest.japi")
            else:
                    ip = query("Database IP", False, "127.0.0.1")
                    port = query("Database Port", False, "1234")
                    user = query("Database User", False, "Admin")
                    name = query("Database Name")
                    password = query("Database Password", True)
            if res != "json" and res != "raml" and res != "japi":
                code = "# Database\n # https://docs.djangoproject.com/en/1.9/ref/settings/#databases\n\n"

                code += "DATABASES = {\n\t'default': {\n"

                code += "\t\t'ENGINE' : '" + getEngineByDB(res) + "',\n"
                if (res == "sqlite3"):
                            code += "\t\t'NAME': '" + path + "',\n"
                else:
                            code += "\t\t'NAME': '" + name + "',\n"
                            code += "\t\t'USER': '" + user + "',\n"
                            code += "\t\t'PASSWORD': '" + password + "',\n"
                            code += "\t\t'HOST': '" + ip + "',\n"
                            code += "\t\t'PORT': '" + port + "',\n"

                code += "\t\t}\n\t}\n"
                localSettings = open("ModelGenerator/ModelGenerator/local_settings.py", "w")
                localSettings.write(code)

                settings = open("ModelGenerator/ModelGenerator/settings.py", "r+")
                content = settings.read()
                settings = open("ModelGenerator/ModelGenerator/settings.py", "w")

                if "DATABASES" in content:
                            tmp = content.split('\n')
                            a = find_sub(tmp, "DATABASES")
                            del tmp[a-3:a+6]
                            content = "\n".join(tmp)
                if "local_settings.py" not in content:
                            content += "\nfrom local_settings import *"
                settings.write(content)


            settings = open("run", "w")
            codeDB = "#!/bin/sh\n\nsource env/bin/activate\n./ModelGenerator/manage.py inspectdb >> out.py\npython src/main.py out.py -v\nmv out.py output/modelsDjango.py\n"
            codeJSON = "#!/bin/sh\n\nsource env/bin/activate\npython src/main.py %s -v\n" % path

            if (res == "json" or res == "raml" or res == "japi"):
                settings.write(codeJSON)
            else:
                settings.write(codeDB)

def main():
           if len(sys.argv) == 1:
                       configure_database_settings()
                       configure_generate_settings()
           elif "-d" in sys.argv or "--database" in sys.argv:
                       configure_database_settings()
           elif "-g" in sys.argv or "--generate" in sys.argv:
                       configure_generate_settings()
            
main()
